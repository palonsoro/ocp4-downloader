#!/usr/bin/env bash

# Description: Script to download several products related with OpenShift 4
# Author:      Sergio Garcia (soukron@gmbros.net)

# install dir
INSTALLDIR=${HOME}/bin

# download urls
BASE_URL=https://mirror.openshift.com/pub/openshift-v4/clients
OPENSHIFT_URL=${BASE_URL}/ocp
CRC_URL=${BASE_URL}/crc
ODO_URL=${BASE_URL}/odo
SERVERLESS_URL=${BASE_URL}/serverless

# cleanup on exit
function cleanup_on_exit() {
  rm -fr ${TMPDIR}
  popd &>/dev/null
  kill 0
}
trap cleanup_on_exit EXIT

# usage
function usage() {
  cat <<EOF
Usage: `basename ${0}` [--force] [--version <ver>] [--all|--client|--install|installer|--crc|--odo] 
  --all               downloads all products
  --client|--oc       downloads OpenShift CLI (oc / kubectl)
  --crc               downloads CodeReady Containers (crc)
  --force             deletes any existing file matching the version
  --help|-h           shows this message
  --install|installer downloads OpenShift Installer (openshift-install)
  --odo               downloads OpenShift CLI for Developers (odo)
  --serverless|--kn   downloads OpenShift Serverless tool (kn)
  --version <ver>     select the version to download for all components. Default: latest
EOF
  exit 0
}

# download and extract a file
# $1 - prefix
# $2 - version
# $3 - baseurl
# $4 - filename
# $5 - tar opts
# $6 - size
function download_and_extract() {
  echo "[${1}] Downloading version ${2} to disk (~${6})..."
  wget -q ${3}/${2}/${4} -O ${TMPDIR}/${4} || { echo "[${1}] ERROR: error downloading file, can't continue with installation."; return 1; }

  echo "[$1] Extracting..."
  tar ${5} ${TMPDIR}/${4} -C ${TMPDIR} || { echo "[${1}] ERROR: error extracting file, can't continue with installation."; return 1; }

  return 0
}

# cleanup if --force is present
# $1 - prefix
# $2 - files to delete
function cleanup_if_force() {
  if [[ ${FORCE} ]]; then
    echo "[${1}] Cleaning up previous existing file..."
    rm -fr ${2}
  fi
}

# check if file exists
# $1 - prefix
# $2 - file
function check_if_exists() {
  if [[ -f ${2} ]]; then
    echo "[${1}] File ${2} is already present. Skipping installation."
    return 1
  fi
  return 0
}

# download openshift-client
function download_openshift_client() {
  # exit if no action required
  [[ ! -v ALL && ! -v CLIENT ]] && return

  # prefix to use during this process
  PREFIX=openshift-client

  # convert "latest" to the latest released version
  if [[ ${1} == "latest" ]]; then
    VERSION=$( curl -s ${OPENSHIFT_URL}/latest/release.txt | grep "Release Metadata:" -A1 | grep Version | cut -d\: -f 2 | tr -d " " )
  else
    VERSION=${1}
  fi

  # cleanup if required
  cleanup_if_force ${PREFIX} "openshift-client-linux-${VERSION} kubectl-linux-${VERSION}"

  # exit if file already exists
  check_if_exists ${PREFIX} openshift-client-linux-${VERSION} || return

  # download and extract the content
  download_and_extract ${PREFIX} ${VERSION} ${OPENSHIFT_URL} openshift-client-linux-${VERSION}.tar.gz xfz 30MB || return

  # do the installation
  mv ${TMPDIR}/oc openshift-client-linux-${VERSION}
  ln -sf openshift-client-linux-${VERSION} oc
  mv ${TMPDIR}/kubectl kubectl-linux-${VERSION}
  ln -sf kubectl-linux-${VERSION} kubectl
  echo "[${PREFIX}] openshift-client ${VERSION} successfully installed!!"
}

# download crc
function download_crc() {
  # exit if no action required
  [[ ! -v ALL && ! -v CRC ]] && return

  # prefix to use during this process
  PREFIX=crc

  # convert "latest" to the latest released version
  if [[ ${1} == "latest" ]]; then
    VERSION=$( curl -s ${CRC_URL}/latest/release-info.json | grep crcVersion | cut -d \" -f 4 - | tr -d " " )
  else
    VERSION=${1}
  fi

  # cleanup if required
  cleanup_if_force ${PREFIX} crc-linux-${VERSION}

  # exit if file already exists
  check_if_exists ${PREFIX} crc-linux-${VERSION} || return

  # download and extract the content
  download_and_extract ${PREFIX} ${VERSION} ${CRC_URL} crc-linux-amd64.tar.xz xfJ 2GB || return

  # do the installation
  mv ${TMPDIR}/crc-linux-${VERSION}-amd64/crc crc-linux-${VERSION}
  ln -sf crc-linux-${VERSION} crc
  echo "[${PREFIX}] crc ${VERSION} successfully installed!!"
}

# download openshift-installer
function download_openshift_installer() {
  # exit if no action required
  [[ ! -v ALL && ! -v INSTALLER ]] && return

  # prefix to use during this process
  PREFIX=openshift-install

  # convert "latest" to the latest released version
  if [[ ${1} == "latest" ]]; then
    VERSION=$( curl -s ${OPENSHIFT_URL}/latest/release.txt | grep "Release Metadata:" -A1 | grep Version | cut -d\: -f 2 | tr -d " " )
  else
    VERSION=${1}
  fi

  # cleanup if required
  cleanup_if_force ${PREFIX} openshift-install-linux-${VERSION}

  # exit if file already exists
  check_if_exists ${PREFIX} openshift-install-linux-${VERSION} || return

  # download and extract the content
  download_and_extract ${PREFIX} ${VERSION} ${OPENSHIFT_URL} openshift-install-linux-${VERSION}.tar.gz xfz 70MB || return

  # do the installation
  mv ${TMPDIR}/openshift-install openshift-install-linux-${VERSION}
  ln -sf openshift-install-linux-${VERSION} openshift-install
  echo "[${PREFIX}] openshift-install ${VERSION} successfully installed!!"
}

# download odo
function download_odo() {
  # exit if no action required
  [[ ! -v ALL && ! -v ODO ]] && return

  # prefix to use during this process
  PREFIX=odo

  # if "latest" download it and extract - odo must be done this way as there's no metadata.json nor release-info.json
  VERSION=${1}
  if [[ ${1} == "latest" ]]; then
    download_and_extract ${PREFIX} ${VERSION} ${ODO_URL} odo-linux-amd64.tar.gz xfz 25MB || return

    # convert "latest" to the latest released version
    VERSION=$( ${TMPDIR}/odo version | grep -Po '(?<=odo v).*(\s)' | cut -d " " -f 1 | tr -d " " )
  fi

  # cleanup if required
  cleanup_if_force ${PREFIX} odo-linux-${VERSION}

  # exit if file already exists
  check_if_exists ${PREFIX} odo-linux-${VERSION} || return

  # download and extract the content if it's not already downloaded
  if [[ ! -f ${TMPDIR}/odo ]]; then
    download_and_extract ${PREFIX} ${VERSION} ${ODO_URL} odo-linux-amd64.tar.gz xfz 25MB || return
  fi

  # do the installation
  mv ${TMPDIR}/odo odo-linux-${VERSION}
  ln -sf odo-linux-${VERSION} odo
  echo "[${PREFIX}] odo ${VERSION} successfully installed!!"
}

# download serverless
function download_serverless() {
  # exit if no action required
  [[ ! -v ALL && ! -v SERVERLESS ]] && return

  # prefix to use during this process
  PREFIX=serverless

  echo "[${PREFIX}] Pending to implement. Skipping installation."
}

# parse arguments from commandline
POSITIONAL=()
while [[ ${#} -gt 0 ]]
do
  key="${1}"
  case ${key} in
    -a|--all)
    ALL=YES
    shift
    ;;
    --client|--oc)
    CLIENT=YES
    shift
    ;;
    --crc)
    CRC=YES
    shift
    ;;
    -f|--force)
    FORCE=YES
    shift
    ;;
    --help|-h)
    usage
    ;;
    --install|--installer)
    INSTALLER=YES
    shift
    ;;
    --odo)
    ODO=YES
    shift
    ;;
    --serverless|-kn)
    SERVERLESS=YES
    shift
    ;;
    --version)
    CVERSION=$( echo ${2} | tr -d " " )
    shift
    shift
    ;;
    *)
    POSITIONAL+=("${1}")
    echo -e "Error: Unknown parameter ${1}.\n"
    usage
    ;;
  esac
done
set -- "${POSITIONAL[@]}"

# create install dir if does no exist
mkdir -p ${INSTALLDIR}
pushd ${INSTALLDIR} &>/dev/null

# create a temporary dir to work
TMPDIR=$( mktemp -d -p . )

# set latest as version if not provided
[[ ! -v CVERSION ]] && CVERSION="latest"

# show usage if no product (or all) is selected
if [[ "${ALL}" == "" && "${CLIENT}" == "" && "${INSTALLER}" == "" && "${CRC}" == "" && "${ODO}" == "" && "${SERVERLESS}" == "" ]]; then
  echo -e "Error: No product selected.\n"
  usage
fi

# print a summary before proceeding
if [[ ${ALL} ]]; then
  echo "[main] Requested to download all products: openshift-client openshift-install crc odo serverless."
else
  echo -n "[main] Requested to download only some products:"
  [[ ${CLIENT} ]] && echo -n " openshift-client"
  [[ ${INSTALLER} ]] && echo -n " openshift-install"
  [[ ${CRC} ]] && echo -n " crc"
  [[ ${ODO} ]] && echo -n " odo"
  [[ ${SERVERLESS} ]] && echo -n " serverless"
  echo "."
fi
[[ ${FORCE} ]] && echo "[main] Requested to overwrite any existing file if version matches."
echo "[main] Requested to download ${CVERSION} version of each requested component."
echo

# download components
download_openshift_installer ${CVERSION} &
download_openshift_client ${CVERSION} &
download_crc ${CVERSION} &
download_odo ${CVERSION} &
download_serverless ${CVERSION} &
wait

